// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: APIPackets.proto

#include "APIPackets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr InitialPacket::InitialPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packetversion_(0)
  , command_(0){}
struct InitialPacketDefaultTypeInternal {
  constexpr InitialPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitialPacketDefaultTypeInternal() {}
  union {
    InitialPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitialPacketDefaultTypeInternal _InitialPacket_default_instance_;
constexpr ResultState::ResultState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errormessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , succeeded_(false){}
struct ResultStateDefaultTypeInternal {
  constexpr ResultStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultStateDefaultTypeInternal() {}
  union {
    ResultState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultStateDefaultTypeInternal _ResultState_default_instance_;
constexpr AppInfoPacket::AppInfoPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : titleid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , titlename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadatapath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lastaccesstime_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , category_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , installdate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uicategory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isvisible_(false)
  , sortpriority_(0)
  , displocation_(0)
  , contentsize_(0){}
struct AppInfoPacketDefaultTypeInternal {
  constexpr AppInfoPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppInfoPacketDefaultTypeInternal() {}
  union {
    AppInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppInfoPacketDefaultTypeInternal _AppInfoPacket_default_instance_;
constexpr AppInfoListPacket::AppInfoListPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apps_(){}
struct AppInfoListPacketDefaultTypeInternal {
  constexpr AppInfoListPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppInfoListPacketDefaultTypeInternal() {}
  union {
    AppInfoListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppInfoListPacketDefaultTypeInternal _AppInfoListPacket_default_instance_;
constexpr AppPacket::AppPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : titleid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppPacketDefaultTypeInternal {
  constexpr AppPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppPacketDefaultTypeInternal() {}
  union {
    AppPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppPacketDefaultTypeInternal _AppPacket_default_instance_;
constexpr RWPacket::RWPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(uint64_t{0u})
  , length_(uint64_t{0u}){}
struct RWPacketDefaultTypeInternal {
  constexpr RWPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RWPacketDefaultTypeInternal() {}
  union {
    RWPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RWPacketDefaultTypeInternal _RWPacket_default_instance_;
constexpr SPRXPacket::SPRXPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , handle_(0){}
struct SPRXPacketDefaultTypeInternal {
  constexpr SPRXPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SPRXPacketDefaultTypeInternal() {}
  union {
    SPRXPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SPRXPacketDefaultTypeInternal _SPRXPacket_default_instance_;
constexpr MemoryInfo::MemoryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : used_(0)
  , free_(0)
  , total_(0)
  , percentage_(0){}
struct MemoryInfoDefaultTypeInternal {
  constexpr MemoryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryInfoDefaultTypeInternal() {}
  union {
    MemoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryInfoDefaultTypeInternal _MemoryInfo_default_instance_;
constexpr CurrentBigApp::CurrentBigApp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , titleid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0){}
struct CurrentBigAppDefaultTypeInternal {
  constexpr CurrentBigAppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurrentBigAppDefaultTypeInternal() {}
  union {
    CurrentBigApp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurrentBigAppDefaultTypeInternal _CurrentBigApp_default_instance_;
constexpr TargetInfoPacket::TargetInfoPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , motherboardserial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , macaddresslan_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , macaddresswifi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idps_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , psid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bigapp_(nullptr)
  , ram_(nullptr)
  , vram_(nullptr)
  , sdkversion_(0)
  , softwareversion_(0)
  , factorysoftwareversion_(0)
  , uart_(false)
  , idumode_(false)
  , consoletype_(0)
  , attached_(0)
  , attachedpid_(0)
  , foregroundaccountid_(0)
  , freespace_(uint64_t{0u})
  , totalspace_(uint64_t{0u})
  , cputemp_(0)
  , soctemp_(0)
  , threadcount_(0)
  , averagecpuusage_(0)
  , busycore_(0){}
struct TargetInfoPacketDefaultTypeInternal {
  constexpr TargetInfoPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetInfoPacketDefaultTypeInternal() {}
  union {
    TargetInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetInfoPacketDefaultTypeInternal _TargetInfoPacket_default_instance_;
constexpr TargetNotifyPacket::TargetNotifyPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iconuri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TargetNotifyPacketDefaultTypeInternal {
  constexpr TargetNotifyPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetNotifyPacketDefaultTypeInternal() {}
  union {
    TargetNotifyPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetNotifyPacketDefaultTypeInternal _TargetNotifyPacket_default_instance_;
constexpr TargetSettingsPacket::TargetSettingsPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameoverlaylocation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , autoloadsettings_(false)
  , showdebugtitleidlabel_(false)
  , showdevkitpanel_(false)
  , showdebugsettings_(false)
  , showapphome_(false)
  , showbuildoverlay_(false)
  , showcpuusage_(false)
  , showthreadcount_(false)
  , showram_(false)
  , showvram_(false)
  , showcputemp_(false)
  , showsoctemp_(false){}
struct TargetSettingsPacketDefaultTypeInternal {
  constexpr TargetSettingsPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetSettingsPacketDefaultTypeInternal() {}
  union {
    TargetSettingsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetSettingsPacketDefaultTypeInternal _TargetSettingsPacket_default_instance_;
constexpr ProcPacket::ProcPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , titleid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0)
  , processid_(0){}
struct ProcPacketDefaultTypeInternal {
  constexpr ProcPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcPacketDefaultTypeInternal() {}
  union {
    ProcPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcPacketDefaultTypeInternal _ProcPacket_default_instance_;
constexpr ProcListPacket::ProcListPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : processes_(){}
struct ProcListPacketDefaultTypeInternal {
  constexpr ProcListPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcListPacketDefaultTypeInternal() {}
  union {
    ProcListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcListPacketDefaultTypeInternal _ProcListPacket_default_instance_;
constexpr LibraryInfoPacket::LibraryInfoPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapbase_(uint64_t{0u})
  , mapsize_(uint64_t{0u})
  , textsize_(uint64_t{0u})
  , database_(uint64_t{0u})
  , datasize_(uint64_t{0u})
  , handle_(0u){}
struct LibraryInfoPacketDefaultTypeInternal {
  constexpr LibraryInfoPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LibraryInfoPacketDefaultTypeInternal() {}
  union {
    LibraryInfoPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LibraryInfoPacketDefaultTypeInternal _LibraryInfoPacket_default_instance_;
constexpr LibraryListPacket::LibraryListPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : libraries_(){}
struct LibraryListPacketDefaultTypeInternal {
  constexpr LibraryListPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LibraryListPacketDefaultTypeInternal() {}
  union {
    LibraryListPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LibraryListPacketDefaultTypeInternal _LibraryListPacket_default_instance_;
constexpr FilePacket::FilePacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FilePacketDefaultTypeInternal {
  constexpr FilePacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilePacketDefaultTypeInternal() {}
  union {
    FilePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilePacketDefaultTypeInternal _FilePacket_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_APIPackets_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_APIPackets_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_APIPackets_2eproto = nullptr;

const uint32_t TableStruct_APIPackets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitialPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InitialPacket, packetversion_),
  PROTOBUF_FIELD_OFFSET(::InitialPacket, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResultState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResultState, succeeded_),
  PROTOBUF_FIELD_OFFSET(::ResultState, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, titleid_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, contentid_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, titlename_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, metadatapath_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, lastaccesstime_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, isvisible_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, sortpriority_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, displocation_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, category_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, contentsize_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, installdate_),
  PROTOBUF_FIELD_OFFSET(::AppInfoPacket, uicategory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppInfoListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppInfoListPacket, apps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AppPacket, titleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RWPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RWPacket, address_),
  PROTOBUF_FIELD_OFFSET(::RWPacket, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SPRXPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SPRXPacket, path_),
  PROTOBUF_FIELD_OFFSET(::SPRXPacket, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MemoryInfo, used_),
  PROTOBUF_FIELD_OFFSET(::MemoryInfo, free_),
  PROTOBUF_FIELD_OFFSET(::MemoryInfo, total_),
  PROTOBUF_FIELD_OFFSET(::MemoryInfo, percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CurrentBigApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CurrentBigApp, pid_),
  PROTOBUF_FIELD_OFFSET(::CurrentBigApp, name_),
  PROTOBUF_FIELD_OFFSET(::CurrentBigApp, titleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, sdkversion_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, softwareversion_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, factorysoftwareversion_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, bigapp_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, consolename_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, motherboardserial_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, serial_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, model_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, macaddresslan_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, macaddresswifi_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, uart_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, idumode_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, idps_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, psid_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, consoletype_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, attached_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, attachedpid_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, foregroundaccountid_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, freespace_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, totalspace_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, cputemp_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, soctemp_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, threadcount_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, averagecpuusage_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, busycore_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, ram_),
  PROTOBUF_FIELD_OFFSET(::TargetInfoPacket, vram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TargetNotifyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TargetNotifyPacket, iconuri_),
  PROTOBUF_FIELD_OFFSET(::TargetNotifyPacket, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, autoloadsettings_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showdebugtitleidlabel_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showdevkitpanel_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showdebugsettings_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showapphome_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showbuildoverlay_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, gameoverlaylocation_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showcpuusage_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showthreadcount_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showram_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showvram_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showcputemp_),
  PROTOBUF_FIELD_OFFSET(::TargetSettingsPacket, showsoctemp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcPacket, appid_),
  PROTOBUF_FIELD_OFFSET(::ProcPacket, processid_),
  PROTOBUF_FIELD_OFFSET(::ProcPacket, name_),
  PROTOBUF_FIELD_OFFSET(::ProcPacket, titleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProcListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProcListPacket, processes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, handle_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, path_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, mapbase_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, mapsize_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, textsize_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, database_),
  PROTOBUF_FIELD_OFFSET(::LibraryInfoPacket, datasize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LibraryListPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LibraryListPacket, libraries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FilePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FilePacket, filepath_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::InitialPacket)},
  { 8, -1, -1, sizeof(::ResultState)},
  { 16, -1, -1, sizeof(::AppInfoPacket)},
  { 34, -1, -1, sizeof(::AppInfoListPacket)},
  { 41, -1, -1, sizeof(::AppPacket)},
  { 48, -1, -1, sizeof(::RWPacket)},
  { 56, -1, -1, sizeof(::SPRXPacket)},
  { 64, -1, -1, sizeof(::MemoryInfo)},
  { 74, -1, -1, sizeof(::CurrentBigApp)},
  { 83, -1, -1, sizeof(::TargetInfoPacket)},
  { 116, -1, -1, sizeof(::TargetNotifyPacket)},
  { 124, -1, -1, sizeof(::TargetSettingsPacket)},
  { 143, -1, -1, sizeof(::ProcPacket)},
  { 153, -1, -1, sizeof(::ProcListPacket)},
  { 160, -1, -1, sizeof(::LibraryInfoPacket)},
  { 173, -1, -1, sizeof(::LibraryListPacket)},
  { 180, -1, -1, sizeof(::FilePacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InitialPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResultState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppInfoPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppInfoListPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RWPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SPRXPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MemoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CurrentBigApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TargetInfoPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TargetNotifyPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TargetSettingsPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProcListPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LibraryInfoPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LibraryListPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FilePacket_default_instance_),
};

const char descriptor_table_protodef_APIPackets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020APIPackets.proto\"7\n\rInitialPacket\022\025\n\rP"
  "acketVersion\030\001 \001(\005\022\017\n\007Command\030\002 \001(\005\"6\n\013R"
  "esultState\022\021\n\tSucceeded\030\001 \001(\010\022\024\n\014ErrorMe"
  "ssage\030\002 \001(\t\"\203\002\n\rAppInfoPacket\022\017\n\007TitleId"
  "\030\001 \001(\t\022\021\n\tContentId\030\002 \001(\t\022\021\n\tTitleName\030\003"
  " \001(\t\022\024\n\014MetaDataPath\030\004 \001(\t\022\026\n\016LastAccess"
  "Time\030\005 \001(\t\022\021\n\tIsVisible\030\006 \001(\010\022\024\n\014SortPri"
  "ority\030\007 \001(\005\022\024\n\014DispLocation\030\010 \001(\005\022\020\n\010Cat"
  "egory\030\t \001(\t\022\023\n\013ContentSize\030\n \001(\005\022\023\n\013Inst"
  "allDate\030\013 \001(\t\022\022\n\nUICategory\030\014 \001(\t\"1\n\021App"
  "InfoListPacket\022\034\n\004Apps\030\001 \003(\0132\016.AppInfoPa"
  "cket\"\034\n\tAppPacket\022\017\n\007TitleId\030\001 \001(\t\"+\n\010RW"
  "Packet\022\017\n\007Address\030\001 \001(\004\022\016\n\006Length\030\002 \001(\004\""
  "*\n\nSPRXPacket\022\014\n\004Path\030\001 \001(\t\022\016\n\006Handle\030\002 "
  "\001(\005\"K\n\nMemoryInfo\022\014\n\004Used\030\001 \001(\005\022\014\n\004Free\030"
  "\002 \001(\005\022\r\n\005Total\030\003 \001(\005\022\022\n\nPercentage\030\004 \001(\002"
  "\";\n\rCurrentBigApp\022\013\n\003Pid\030\001 \001(\005\022\014\n\004Name\030\002"
  " \001(\t\022\017\n\007TitleId\030\003 \001(\t\"\317\004\n\020TargetInfoPack"
  "et\022\022\n\nSDKVersion\030\001 \001(\005\022\027\n\017SoftwareVersio"
  "n\030\002 \001(\005\022\036\n\026FactorySoftwareVersion\030\003 \001(\005\022"
  "\036\n\006BigApp\030\004 \001(\0132\016.CurrentBigApp\022\023\n\013Conso"
  "leName\030\005 \001(\t\022\031\n\021MotherboardSerial\030\006 \001(\t\022"
  "\016\n\006Serial\030\007 \001(\t\022\r\n\005Model\030\010 \001(\t\022\025\n\rMACAdd"
  "ressLAN\030\t \001(\t\022\026\n\016MACAddressWIFI\030\n \001(\t\022\014\n"
  "\004UART\030\013 \001(\010\022\017\n\007IDUMode\030\014 \001(\010\022\014\n\004IDPS\030\r \001"
  "(\t\022\014\n\004PSID\030\016 \001(\t\022\023\n\013ConsoleType\030\017 \001(\005\022\020\n"
  "\010Attached\030\020 \001(\005\022\023\n\013AttachedPid\030\021 \001(\005\022\033\n\023"
  "ForegroundAccountId\030\022 \001(\005\022\021\n\tFreeSpace\030\023"
  " \001(\004\022\022\n\nTotalSpace\030\024 \001(\004\022\017\n\007CPUTemp\030\025 \001("
  "\005\022\017\n\007SOCTemp\030\026 \001(\005\022\023\n\013ThreadCount\030\027 \001(\005\022"
  "\027\n\017AverageCPUUsage\030\030 \001(\002\022\020\n\010BusyCore\030\031 \001"
  "(\005\022\030\n\003Ram\030\032 \001(\0132\013.MemoryInfo\022\031\n\004VRam\030\033 \001"
  "(\0132\013.MemoryInfo\"6\n\022TargetNotifyPacket\022\017\n"
  "\007IconURI\030\001 \001(\t\022\017\n\007Message\030\002 \001(\t\"\313\002\n\024Targ"
  "etSettingsPacket\022\030\n\020AutoLoadSettings\030\001 \001"
  "(\010\022\035\n\025ShowDebugTitleIdLabel\030\002 \001(\010\022\027\n\017Sho"
  "wDevkitPanel\030\003 \001(\010\022\031\n\021ShowDebugSettings\030"
  "\004 \001(\010\022\023\n\013ShowAppHome\030\005 \001(\010\022\030\n\020ShowBuildO"
  "verlay\030\006 \001(\010\022\033\n\023GameOverlayLocation\030\007 \001("
  "\t\022\024\n\014ShowCPUUsage\030\010 \001(\010\022\027\n\017ShowThreadCou"
  "nt\030\t \001(\010\022\017\n\007Showram\030\n \001(\010\022\020\n\010Showvram\030\013 "
  "\001(\010\022\023\n\013ShowCPUTemp\030\014 \001(\010\022\023\n\013ShowSOCTemp\030"
  "\r \001(\010\"M\n\nProcPacket\022\r\n\005AppId\030\001 \001(\005\022\021\n\tPr"
  "ocessId\030\002 \001(\005\022\014\n\004Name\030\003 \001(\t\022\017\n\007TitleId\030\004"
  " \001(\t\"0\n\016ProcListPacket\022\036\n\tProcesses\030\001 \003("
  "\0132\013.ProcPacket\"\211\001\n\021LibraryInfoPacket\022\016\n\006"
  "Handle\030\001 \001(\r\022\014\n\004Path\030\002 \001(\t\022\017\n\007MapBase\030\003 "
  "\001(\004\022\017\n\007MapSize\030\004 \001(\004\022\020\n\010TextSize\030\005 \001(\004\022\020"
  "\n\010DataBase\030\006 \001(\004\022\020\n\010DataSize\030\007 \001(\004\":\n\021Li"
  "braryListPacket\022%\n\tLibraries\030\001 \003(\0132\022.Lib"
  "raryInfoPacket\"\036\n\nFilePacket\022\020\n\010FilePath"
  "\030\001 \001(\t*\220\014\n\nAPICommand\022\026\n\022API_APPS_CHECK_"
  "VER\020\000\022\023\n\017API_APPS_GET_DB\020\001\022\031\n\025API_APPS_G"
  "ET_INFO_STR\020\002\022\023\n\017API_APPS_STATUS\020\003\022\022\n\016AP"
  "I_APPS_START\020\004\022\021\n\rAPI_APPS_STOP\020\005\022\024\n\020API"
  "_APPS_SUSPEND\020\006\022\023\n\017API_APPS_RESUME\020\007\022\023\n\017"
  "API_APPS_DELETE\020\010\022\033\n\027API_APPS_SET_VISIBI"
  "LITY\020\t\022\033\n\027API_APPS_GET_VISIBILITY\020\n\022\022\n\016A"
  "PI_DBG_ATTACH\020\013\022\022\n\016API_DBG_DETACH\020\014\022\027\n\023A"
  "PI_DBG_GET_CURRENT\020\r\022\020\n\014API_DBG_READ\020\016\022\021"
  "\n\rAPI_DBG_WRITE\020\017\022\020\n\014API_DBG_KILL\020\020\022\021\n\rA"
  "PI_DBG_BREAK\020\021\022\022\n\016API_DBG_RESUME\020\022\022\022\n\016AP"
  "I_DBG_SIGNAL\020\023\022\020\n\014API_DBG_STEP\020\024\022\025\n\021API_"
  "DBG_STEP_OVER\020\025\022\024\n\020API_DBG_STEP_OUT\020\026\022\031\n"
  "\025API_DBG_GET_CALLSTACK\020\027\022\023\n\017API_DBG_GET_"
  "REG\020\030\022\023\n\017API_DBG_SET_REG\020\031\022\024\n\020API_DBG_GE"
  "T_FREG\020\032\022\024\n\020API_DBG_SET_FREG\020\033\022\026\n\022API_DB"
  "G_GET_DBGREG\020\034\022\026\n\022API_DBG_SET_DBGREG\020\035\022\030"
  "\n\024API_DBG_LOAD_LIBRARY\020\036\022\032\n\026API_DBG_UNLO"
  "AD_LIBRARY\020\037\022\032\n\026API_DBG_RELOAD_LIBRARY\020 "
  "\022\030\n\024API_DBG_LIBRARY_LIST\020!\022\027\n\023API_DBG_TH"
  "READ_LIST\020\"\022\027\n\023API_DBG_THREAD_STOP\020#\022\031\n\025"
  "API_DBG_THREAD_RESUME\020$\022\036\n\032API_DBG_BREAK"
  "POINT_GETFREE\020%\022\032\n\026API_DBG_BREAKPOINT_SE"
  "T\020&\022\035\n\031API_DBG_BREAKPOINT_UPDATE\020\'\022\035\n\031AP"
  "I_DBG_BREAKPOINT_REMOVE\020(\022\036\n\032API_DBG_BRE"
  "AKPOINT_GETINFO\020)\022\033\n\027API_DBG_BREAKPOINT_"
  "LIST\020*\022\032\n\026API_DBG_WATCHPOINT_SET\020+\022\035\n\031AP"
  "I_DBG_WATCHPOINT_UPDATE\020,\022\035\n\031API_DBG_WAT"
  "CHPOINT_REMOVE\020-\022\036\n\032API_DBG_WATCHPOINT_G"
  "ETINFO\020.\022\033\n\027API_DBG_WATCHPOINT_LIST\020/\022\021\n"
  "\rAPI_KERN_BASE\0200\022\021\n\rAPI_KERN_READ\0201\022\022\n\016A"
  "PI_KERN_WRITE\0202\022\023\n\017API_TARGET_INFO\0203\022\027\n\023"
  "API_TARGET_RESTMODE\0204\022\027\n\023API_TARGET_SHUT"
  "DOWN\0205\022\025\n\021API_TARGET_REBOOT\0206\022\025\n\021API_TAR"
  "GET_NOTIFY\0207\022\025\n\021API_TARGET_BUZZER\0208\022\026\n\022A"
  "PI_TARGET_SET_LED\0209\022\033\n\027API_TARGET_SET_SE"
  "TTINGS\020:\022\034\n\030API_TARGET_GET_PROC_LIST\020;\022\030"
  "\n\024API_TARGET_SEND_FILE\020<\022\033\n\027API_TARGET_R"
  "ECIEVE_FILE\020=\022\032\n\026API_TARGET_DELETE_FILE\020"
  ">*I\n\010AppState\022\025\n\021STATE_NOT_RUNNING\020\000\022\021\n\r"
  "STATE_RUNNING\020\001\022\023\n\017STATE_SUSPENDED\020\002b\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_APIPackets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_APIPackets_2eproto = {
  false, false, 3684, descriptor_table_protodef_APIPackets_2eproto, "APIPackets.proto", 
  &descriptor_table_APIPackets_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_APIPackets_2eproto::offsets,
  file_level_metadata_APIPackets_2eproto, file_level_enum_descriptors_APIPackets_2eproto, file_level_service_descriptors_APIPackets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_APIPackets_2eproto_getter() {
  return &descriptor_table_APIPackets_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_APIPackets_2eproto(&descriptor_table_APIPackets_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* APICommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_APIPackets_2eproto);
  return file_level_enum_descriptors_APIPackets_2eproto[0];
}
bool APICommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_APIPackets_2eproto);
  return file_level_enum_descriptors_APIPackets_2eproto[1];
}
bool AppState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InitialPacket::_Internal {
 public:
};

InitialPacket::InitialPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:InitialPacket)
}
InitialPacket::InitialPacket(const InitialPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packetversion_, &from.packetversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&packetversion_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:InitialPacket)
}

inline void InitialPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packetversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&packetversion_)) + sizeof(command_));
}

InitialPacket::~InitialPacket() {
  // @@protoc_insertion_point(destructor:InitialPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitialPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitialPacket::ArenaDtor(void* object) {
  InitialPacket* _this = reinterpret_cast< InitialPacket* >(object);
  (void)_this;
}
void InitialPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitialPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitialPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:InitialPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&packetversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&packetversion_)) + sizeof(command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 PacketVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          packetversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitialPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitialPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 PacketVersion = 1;
  if (this->_internal_packetversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetversion(), target);
  }

  // int32 Command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitialPacket)
  return target;
}

size_t InitialPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitialPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 PacketVersion = 1;
  if (this->_internal_packetversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packetversion());
  }

  // int32 Command = 2;
  if (this->_internal_command() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitialPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitialPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitialPacket::GetClassData() const { return &_class_data_; }

void InitialPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitialPacket *>(to)->MergeFrom(
      static_cast<const InitialPacket &>(from));
}


void InitialPacket::MergeFrom(const InitialPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitialPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_packetversion() != 0) {
    _internal_set_packetversion(from._internal_packetversion());
  }
  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitialPacket::CopyFrom(const InitialPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitialPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialPacket::IsInitialized() const {
  return true;
}

void InitialPacket::InternalSwap(InitialPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitialPacket, command_)
      + sizeof(InitialPacket::command_)
      - PROTOBUF_FIELD_OFFSET(InitialPacket, packetversion_)>(
          reinterpret_cast<char*>(&packetversion_),
          reinterpret_cast<char*>(&other->packetversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[0]);
}

// ===================================================================

class ResultState::_Internal {
 public:
};

ResultState::ResultState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ResultState)
}
ResultState::ResultState(const ResultState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArenaForAllocation());
  }
  succeeded_ = from.succeeded_;
  // @@protoc_insertion_point(copy_constructor:ResultState)
}

inline void ResultState::SharedCtor() {
errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errormessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
succeeded_ = false;
}

ResultState::~ResultState() {
  // @@protoc_insertion_point(destructor:ResultState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResultState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultState::ArenaDtor(void* object) {
  ResultState* _this = reinterpret_cast< ResultState* >(object);
  (void)_this;
}
void ResultState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultState::Clear() {
// @@protoc_insertion_point(message_clear_start:ResultState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmpty();
  succeeded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Succeeded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ErrorMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ResultState.ErrorMessage"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResultState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Succeeded = 1;
  if (this->_internal_succeeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succeeded(), target);
  }

  // string ErrorMessage = 2;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ResultState.ErrorMessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResultState)
  return target;
}

size_t ResultState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResultState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ErrorMessage = 2;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // bool Succeeded = 1;
  if (this->_internal_succeeded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResultState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultState::GetClassData() const { return &_class_data_; }

void ResultState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultState *>(to)->MergeFrom(
      static_cast<const ResultState &>(from));
}


void ResultState::MergeFrom(const ResultState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResultState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _internal_set_errormessage(from._internal_errormessage());
  }
  if (from._internal_succeeded() != 0) {
    _internal_set_succeeded(from._internal_succeeded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultState::CopyFrom(const ResultState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResultState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultState::IsInitialized() const {
  return true;
}

void ResultState::InternalSwap(ResultState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormessage_, lhs_arena,
      &other->errormessage_, rhs_arena
  );
  swap(succeeded_, other->succeeded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[1]);
}

// ===================================================================

class AppInfoPacket::_Internal {
 public:
};

AppInfoPacket::AppInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppInfoPacket)
}
AppInfoPacket::AppInfoPacket(const AppInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_titleid().empty()) {
    titleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_titleid(), 
      GetArenaForAllocation());
  }
  contentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contentid().empty()) {
    contentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contentid(), 
      GetArenaForAllocation());
  }
  titlename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    titlename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_titlename().empty()) {
    titlename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_titlename(), 
      GetArenaForAllocation());
  }
  metadatapath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadatapath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadatapath().empty()) {
    metadatapath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadatapath(), 
      GetArenaForAllocation());
  }
  lastaccesstime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lastaccesstime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lastaccesstime().empty()) {
    lastaccesstime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lastaccesstime(), 
      GetArenaForAllocation());
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category(), 
      GetArenaForAllocation());
  }
  installdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    installdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_installdate().empty()) {
    installdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_installdate(), 
      GetArenaForAllocation());
  }
  uicategory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uicategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uicategory().empty()) {
    uicategory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uicategory(), 
      GetArenaForAllocation());
  }
  ::memcpy(&isvisible_, &from.isvisible_,
    static_cast<size_t>(reinterpret_cast<char*>(&contentsize_) -
    reinterpret_cast<char*>(&isvisible_)) + sizeof(contentsize_));
  // @@protoc_insertion_point(copy_constructor:AppInfoPacket)
}

inline void AppInfoPacket::SharedCtor() {
titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
titlename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  titlename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadatapath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadatapath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lastaccesstime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lastaccesstime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
installdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  installdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uicategory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uicategory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isvisible_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contentsize_) -
    reinterpret_cast<char*>(&isvisible_)) + sizeof(contentsize_));
}

AppInfoPacket::~AppInfoPacket() {
  // @@protoc_insertion_point(destructor:AppInfoPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  titleid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadatapath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastaccesstime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  installdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uicategory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInfoPacket::ArenaDtor(void* object) {
  AppInfoPacket* _this = reinterpret_cast< AppInfoPacket* >(object);
  (void)_this;
}
void AppInfoPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:AppInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  titleid_.ClearToEmpty();
  contentid_.ClearToEmpty();
  titlename_.ClearToEmpty();
  metadatapath_.ClearToEmpty();
  lastaccesstime_.ClearToEmpty();
  category_.ClearToEmpty();
  installdate_.ClearToEmpty();
  uicategory_.ClearToEmpty();
  ::memset(&isvisible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contentsize_) -
      reinterpret_cast<char*>(&isvisible_)) + sizeof(contentsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfoPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TitleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_titleid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.TitleId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ContentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.ContentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TitleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_titlename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.TitleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MetaDataPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadatapath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.MetaDataPath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LastAccessTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_lastaccesstime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.LastAccessTime"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsVisible = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          isvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SortPriority = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sortpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DispLocation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          displocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Category = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.Category"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ContentSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          contentsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstallDate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_installdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.InstallDate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UICategory = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_uicategory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfoPacket.UICategory"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string TitleId = 1;
  if (!this->_internal_titleid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titleid().data(), static_cast<int>(this->_internal_titleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.TitleId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_titleid(), target);
  }

  // string ContentId = 2;
  if (!this->_internal_contentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentid().data(), static_cast<int>(this->_internal_contentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.ContentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contentid(), target);
  }

  // string TitleName = 3;
  if (!this->_internal_titlename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titlename().data(), static_cast<int>(this->_internal_titlename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.TitleName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_titlename(), target);
  }

  // string MetaDataPath = 4;
  if (!this->_internal_metadatapath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadatapath().data(), static_cast<int>(this->_internal_metadatapath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.MetaDataPath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_metadatapath(), target);
  }

  // string LastAccessTime = 5;
  if (!this->_internal_lastaccesstime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastaccesstime().data(), static_cast<int>(this->_internal_lastaccesstime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.LastAccessTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lastaccesstime(), target);
  }

  // bool IsVisible = 6;
  if (this->_internal_isvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isvisible(), target);
  }

  // int32 SortPriority = 7;
  if (this->_internal_sortpriority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sortpriority(), target);
  }

  // int32 DispLocation = 8;
  if (this->_internal_displocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_displocation(), target);
  }

  // string Category = 9;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.Category");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_category(), target);
  }

  // int32 ContentSize = 10;
  if (this->_internal_contentsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_contentsize(), target);
  }

  // string InstallDate = 11;
  if (!this->_internal_installdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_installdate().data(), static_cast<int>(this->_internal_installdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.InstallDate");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_installdate(), target);
  }

  // string UICategory = 12;
  if (!this->_internal_uicategory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uicategory().data(), static_cast<int>(this->_internal_uicategory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfoPacket.UICategory");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_uicategory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppInfoPacket)
  return target;
}

size_t AppInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TitleId = 1;
  if (!this->_internal_titleid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titleid());
  }

  // string ContentId = 2;
  if (!this->_internal_contentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contentid());
  }

  // string TitleName = 3;
  if (!this->_internal_titlename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titlename());
  }

  // string MetaDataPath = 4;
  if (!this->_internal_metadatapath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadatapath());
  }

  // string LastAccessTime = 5;
  if (!this->_internal_lastaccesstime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastaccesstime());
  }

  // string Category = 9;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // string InstallDate = 11;
  if (!this->_internal_installdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_installdate());
  }

  // string UICategory = 12;
  if (!this->_internal_uicategory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uicategory());
  }

  // bool IsVisible = 6;
  if (this->_internal_isvisible() != 0) {
    total_size += 1 + 1;
  }

  // int32 SortPriority = 7;
  if (this->_internal_sortpriority() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sortpriority());
  }

  // int32 DispLocation = 8;
  if (this->_internal_displocation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_displocation());
  }

  // int32 ContentSize = 10;
  if (this->_internal_contentsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_contentsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfoPacket::GetClassData() const { return &_class_data_; }

void AppInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppInfoPacket *>(to)->MergeFrom(
      static_cast<const AppInfoPacket &>(from));
}


void AppInfoPacket::MergeFrom(const AppInfoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppInfoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_titleid().empty()) {
    _internal_set_titleid(from._internal_titleid());
  }
  if (!from._internal_contentid().empty()) {
    _internal_set_contentid(from._internal_contentid());
  }
  if (!from._internal_titlename().empty()) {
    _internal_set_titlename(from._internal_titlename());
  }
  if (!from._internal_metadatapath().empty()) {
    _internal_set_metadatapath(from._internal_metadatapath());
  }
  if (!from._internal_lastaccesstime().empty()) {
    _internal_set_lastaccesstime(from._internal_lastaccesstime());
  }
  if (!from._internal_category().empty()) {
    _internal_set_category(from._internal_category());
  }
  if (!from._internal_installdate().empty()) {
    _internal_set_installdate(from._internal_installdate());
  }
  if (!from._internal_uicategory().empty()) {
    _internal_set_uicategory(from._internal_uicategory());
  }
  if (from._internal_isvisible() != 0) {
    _internal_set_isvisible(from._internal_isvisible());
  }
  if (from._internal_sortpriority() != 0) {
    _internal_set_sortpriority(from._internal_sortpriority());
  }
  if (from._internal_displocation() != 0) {
    _internal_set_displocation(from._internal_displocation());
  }
  if (from._internal_contentsize() != 0) {
    _internal_set_contentsize(from._internal_contentsize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfoPacket::CopyFrom(const AppInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfoPacket::IsInitialized() const {
  return true;
}

void AppInfoPacket::InternalSwap(AppInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &titleid_, lhs_arena,
      &other->titleid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contentid_, lhs_arena,
      &other->contentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &titlename_, lhs_arena,
      &other->titlename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadatapath_, lhs_arena,
      &other->metadatapath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lastaccesstime_, lhs_arena,
      &other->lastaccesstime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &category_, lhs_arena,
      &other->category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &installdate_, lhs_arena,
      &other->installdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uicategory_, lhs_arena,
      &other->uicategory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfoPacket, contentsize_)
      + sizeof(AppInfoPacket::contentsize_)
      - PROTOBUF_FIELD_OFFSET(AppInfoPacket, isvisible_)>(
          reinterpret_cast<char*>(&isvisible_),
          reinterpret_cast<char*>(&other->isvisible_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfoPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[2]);
}

// ===================================================================

class AppInfoListPacket::_Internal {
 public:
};

AppInfoListPacket::AppInfoListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppInfoListPacket)
}
AppInfoListPacket::AppInfoListPacket(const AppInfoListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppInfoListPacket)
}

inline void AppInfoListPacket::SharedCtor() {
}

AppInfoListPacket::~AppInfoListPacket() {
  // @@protoc_insertion_point(destructor:AppInfoListPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppInfoListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppInfoListPacket::ArenaDtor(void* object) {
  AppInfoListPacket* _this = reinterpret_cast< AppInfoListPacket* >(object);
  (void)_this;
}
void AppInfoListPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfoListPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppInfoListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:AppInfoListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfoListPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AppInfoPacket Apps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppInfoListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppInfoListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AppInfoPacket Apps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppInfoListPacket)
  return target;
}

size_t AppInfoListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppInfoListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AppInfoPacket Apps = 1;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfoListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppInfoListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfoListPacket::GetClassData() const { return &_class_data_; }

void AppInfoListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppInfoListPacket *>(to)->MergeFrom(
      static_cast<const AppInfoListPacket &>(from));
}


void AppInfoListPacket::MergeFrom(const AppInfoListPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppInfoListPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  apps_.MergeFrom(from.apps_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfoListPacket::CopyFrom(const AppInfoListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppInfoListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfoListPacket::IsInitialized() const {
  return true;
}

void AppInfoListPacket::InternalSwap(AppInfoListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  apps_.InternalSwap(&other->apps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfoListPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[3]);
}

// ===================================================================

class AppPacket::_Internal {
 public:
};

AppPacket::AppPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppPacket)
}
AppPacket::AppPacket(const AppPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_titleid().empty()) {
    titleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_titleid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AppPacket)
}

inline void AppPacket::SharedCtor() {
titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppPacket::~AppPacket() {
  // @@protoc_insertion_point(destructor:AppPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  titleid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppPacket::ArenaDtor(void* object) {
  AppPacket* _this = reinterpret_cast< AppPacket* >(object);
  (void)_this;
}
void AppPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:AppPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  titleid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string TitleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_titleid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPacket.TitleId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string TitleId = 1;
  if (!this->_internal_titleid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titleid().data(), static_cast<int>(this->_internal_titleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPacket.TitleId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_titleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppPacket)
  return target;
}

size_t AppPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TitleId = 1;
  if (!this->_internal_titleid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppPacket::GetClassData() const { return &_class_data_; }

void AppPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppPacket *>(to)->MergeFrom(
      static_cast<const AppPacket &>(from));
}


void AppPacket::MergeFrom(const AppPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_titleid().empty()) {
    _internal_set_titleid(from._internal_titleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppPacket::CopyFrom(const AppPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPacket::IsInitialized() const {
  return true;
}

void AppPacket::InternalSwap(AppPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &titleid_, lhs_arena,
      &other->titleid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[4]);
}

// ===================================================================

class RWPacket::_Internal {
 public:
};

RWPacket::RWPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RWPacket)
}
RWPacket::RWPacket(const RWPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&address_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:RWPacket)
}

inline void RWPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&address_)) + sizeof(length_));
}

RWPacket::~RWPacket() {
  // @@protoc_insertion_point(destructor:RWPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RWPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RWPacket::ArenaDtor(void* object) {
  RWPacket* _this = reinterpret_cast< RWPacket* >(object);
  (void)_this;
}
void RWPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RWPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RWPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:RWPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&address_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RWPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 Length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RWPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RWPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // uint64 Length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RWPacket)
  return target;
}

size_t RWPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RWPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
  }

  // uint64 Length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RWPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RWPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RWPacket::GetClassData() const { return &_class_data_; }

void RWPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RWPacket *>(to)->MergeFrom(
      static_cast<const RWPacket &>(from));
}


void RWPacket::MergeFrom(const RWPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RWPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RWPacket::CopyFrom(const RWPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RWPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RWPacket::IsInitialized() const {
  return true;
}

void RWPacket::InternalSwap(RWPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RWPacket, length_)
      + sizeof(RWPacket::length_)
      - PROTOBUF_FIELD_OFFSET(RWPacket, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RWPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[5]);
}

// ===================================================================

class SPRXPacket::_Internal {
 public:
};

SPRXPacket::SPRXPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SPRXPacket)
}
SPRXPacket::SPRXPacket(const SPRXPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:SPRXPacket)
}

inline void SPRXPacket::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
handle_ = 0;
}

SPRXPacket::~SPRXPacket() {
  // @@protoc_insertion_point(destructor:SPRXPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SPRXPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SPRXPacket::ArenaDtor(void* object) {
  SPRXPacket* _this = reinterpret_cast< SPRXPacket* >(object);
  (void)_this;
}
void SPRXPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SPRXPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SPRXPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:SPRXPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  handle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SPRXPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SPRXPacket.Path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SPRXPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SPRXPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SPRXPacket.Path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // int32 Handle = 2;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SPRXPacket)
  return target;
}

size_t SPRXPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SPRXPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 Handle = 2;
  if (this->_internal_handle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SPRXPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SPRXPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SPRXPacket::GetClassData() const { return &_class_data_; }

void SPRXPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SPRXPacket *>(to)->MergeFrom(
      static_cast<const SPRXPacket &>(from));
}


void SPRXPacket::MergeFrom(const SPRXPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SPRXPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_handle() != 0) {
    _internal_set_handle(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SPRXPacket::CopyFrom(const SPRXPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SPRXPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPRXPacket::IsInitialized() const {
  return true;
}

void SPRXPacket::InternalSwap(SPRXPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SPRXPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[6]);
}

// ===================================================================

class MemoryInfo::_Internal {
 public:
};

MemoryInfo::MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MemoryInfo)
}
MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&used_, &from.used_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentage_) -
    reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
  // @@protoc_insertion_point(copy_constructor:MemoryInfo)
}

inline void MemoryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&used_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&percentage_) -
    reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:MemoryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryInfo::ArenaDtor(void* object) {
  MemoryInfo* _this = reinterpret_cast< MemoryInfo* >(object);
  (void)_this;
}
void MemoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MemoryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_) -
      reinterpret_cast<char*>(&used_)) + sizeof(percentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Used = 1;
  if (this->_internal_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_used(), target);
  }

  // int32 Free = 2;
  if (this->_internal_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_free(), target);
  }

  // int32 Total = 3;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  // float Percentage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = this->_internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemoryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Used = 1;
  if (this->_internal_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_used());
  }

  // int32 Free = 2;
  if (this->_internal_free() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_free());
  }

  // int32 Total = 3;
  if (this->_internal_total() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_total());
  }

  // float Percentage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = this->_internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryInfo::GetClassData() const { return &_class_data_; }

void MemoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemoryInfo *>(to)->MergeFrom(
      static_cast<const MemoryInfo &>(from));
}


void MemoryInfo::MergeFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from._internal_free() != 0) {
    _internal_set_free(from._internal_free());
  }
  if (from._internal_total() != 0) {
    _internal_set_total(from._internal_total());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percentage = from._internal_percentage();
  uint32_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {
  return true;
}

void MemoryInfo::InternalSwap(MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryInfo, percentage_)
      + sizeof(MemoryInfo::percentage_)
      - PROTOBUF_FIELD_OFFSET(MemoryInfo, used_)>(
          reinterpret_cast<char*>(&used_),
          reinterpret_cast<char*>(&other->used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[7]);
}

// ===================================================================

class CurrentBigApp::_Internal {
 public:
};

CurrentBigApp::CurrentBigApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CurrentBigApp)
}
CurrentBigApp::CurrentBigApp(const CurrentBigApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_titleid().empty()) {
    titleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_titleid(), 
      GetArenaForAllocation());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:CurrentBigApp)
}

inline void CurrentBigApp::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pid_ = 0;
}

CurrentBigApp::~CurrentBigApp() {
  // @@protoc_insertion_point(destructor:CurrentBigApp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CurrentBigApp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titleid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentBigApp::ArenaDtor(void* object) {
  CurrentBigApp* _this = reinterpret_cast< CurrentBigApp* >(object);
  (void)_this;
}
void CurrentBigApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentBigApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentBigApp::Clear() {
// @@protoc_insertion_point(message_clear_start:CurrentBigApp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  titleid_.ClearToEmpty();
  pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentBigApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CurrentBigApp.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TitleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_titleid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CurrentBigApp.TitleId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentBigApp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CurrentBigApp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CurrentBigApp.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string TitleId = 3;
  if (!this->_internal_titleid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titleid().data(), static_cast<int>(this->_internal_titleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CurrentBigApp.TitleId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_titleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurrentBigApp)
  return target;
}

size_t CurrentBigApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CurrentBigApp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string TitleId = 3;
  if (!this->_internal_titleid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titleid());
  }

  // int32 Pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentBigApp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentBigApp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentBigApp::GetClassData() const { return &_class_data_; }

void CurrentBigApp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentBigApp *>(to)->MergeFrom(
      static_cast<const CurrentBigApp &>(from));
}


void CurrentBigApp::MergeFrom(const CurrentBigApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CurrentBigApp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_titleid().empty()) {
    _internal_set_titleid(from._internal_titleid());
  }
  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentBigApp::CopyFrom(const CurrentBigApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CurrentBigApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentBigApp::IsInitialized() const {
  return true;
}

void CurrentBigApp::InternalSwap(CurrentBigApp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &titleid_, lhs_arena,
      &other->titleid_, rhs_arena
  );
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentBigApp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[8]);
}

// ===================================================================

class TargetInfoPacket::_Internal {
 public:
  static const ::CurrentBigApp& bigapp(const TargetInfoPacket* msg);
  static const ::MemoryInfo& ram(const TargetInfoPacket* msg);
  static const ::MemoryInfo& vram(const TargetInfoPacket* msg);
};

const ::CurrentBigApp&
TargetInfoPacket::_Internal::bigapp(const TargetInfoPacket* msg) {
  return *msg->bigapp_;
}
const ::MemoryInfo&
TargetInfoPacket::_Internal::ram(const TargetInfoPacket* msg) {
  return *msg->ram_;
}
const ::MemoryInfo&
TargetInfoPacket::_Internal::vram(const TargetInfoPacket* msg) {
  return *msg->vram_;
}
TargetInfoPacket::TargetInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TargetInfoPacket)
}
TargetInfoPacket::TargetInfoPacket(const TargetInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  consolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consolename().empty()) {
    consolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_consolename(), 
      GetArenaForAllocation());
  }
  motherboardserial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    motherboardserial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_motherboardserial().empty()) {
    motherboardserial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_motherboardserial(), 
      GetArenaForAllocation());
  }
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial().empty()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  macaddresslan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    macaddresslan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_macaddresslan().empty()) {
    macaddresslan_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_macaddresslan(), 
      GetArenaForAllocation());
  }
  macaddresswifi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    macaddresswifi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_macaddresswifi().empty()) {
    macaddresswifi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_macaddresswifi(), 
      GetArenaForAllocation());
  }
  idps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idps().empty()) {
    idps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idps(), 
      GetArenaForAllocation());
  }
  psid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    psid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_psid().empty()) {
    psid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_psid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bigapp()) {
    bigapp_ = new ::CurrentBigApp(*from.bigapp_);
  } else {
    bigapp_ = nullptr;
  }
  if (from._internal_has_ram()) {
    ram_ = new ::MemoryInfo(*from.ram_);
  } else {
    ram_ = nullptr;
  }
  if (from._internal_has_vram()) {
    vram_ = new ::MemoryInfo(*from.vram_);
  } else {
    vram_ = nullptr;
  }
  ::memcpy(&sdkversion_, &from.sdkversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&busycore_) -
    reinterpret_cast<char*>(&sdkversion_)) + sizeof(busycore_));
  // @@protoc_insertion_point(copy_constructor:TargetInfoPacket)
}

inline void TargetInfoPacket::SharedCtor() {
consolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
motherboardserial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  motherboardserial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
macaddresslan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  macaddresslan_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
macaddresswifi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  macaddresswifi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idps_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
psid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  psid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bigapp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&busycore_) -
    reinterpret_cast<char*>(&bigapp_)) + sizeof(busycore_));
}

TargetInfoPacket::~TargetInfoPacket() {
  // @@protoc_insertion_point(destructor:TargetInfoPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  consolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  motherboardserial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  macaddresslan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  macaddresswifi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bigapp_;
  if (this != internal_default_instance()) delete ram_;
  if (this != internal_default_instance()) delete vram_;
}

void TargetInfoPacket::ArenaDtor(void* object) {
  TargetInfoPacket* _this = reinterpret_cast< TargetInfoPacket* >(object);
  (void)_this;
}
void TargetInfoPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetInfoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consolename_.ClearToEmpty();
  motherboardserial_.ClearToEmpty();
  serial_.ClearToEmpty();
  model_.ClearToEmpty();
  macaddresslan_.ClearToEmpty();
  macaddresswifi_.ClearToEmpty();
  idps_.ClearToEmpty();
  psid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && bigapp_ != nullptr) {
    delete bigapp_;
  }
  bigapp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ram_ != nullptr) {
    delete ram_;
  }
  ram_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vram_ != nullptr) {
    delete vram_;
  }
  vram_ = nullptr;
  ::memset(&sdkversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&busycore_) -
      reinterpret_cast<char*>(&sdkversion_)) + sizeof(busycore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetInfoPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 SDKVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sdkversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SoftwareVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          softwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 FactorySoftwareVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          factorysoftwareversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CurrentBigApp BigApp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigapp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ConsoleName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_consolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.ConsoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MotherboardSerial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_motherboardserial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.MotherboardSerial"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Serial = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.Serial"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.Model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MACAddressLAN = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_macaddresslan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.MACAddressLAN"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MACAddressWIFI = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_macaddresswifi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.MACAddressWIFI"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool UART = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IDUMode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          idumode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string IDPS = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_idps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.IDPS"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PSID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_psid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetInfoPacket.PSID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ConsoleType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          consoletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Attached = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          attached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AttachedPid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          attachedpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ForegroundAccountId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          foregroundaccountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 FreeSpace = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TotalSpace = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          totalspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CPUTemp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          cputemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SOCTemp = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          soctemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ThreadCount = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          threadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float AverageCPUUsage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          averagecpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 BusyCore = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          busycore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MemoryInfo Ram = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ram(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MemoryInfo VRam = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_vram(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 SDKVersion = 1;
  if (this->_internal_sdkversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sdkversion(), target);
  }

  // int32 SoftwareVersion = 2;
  if (this->_internal_softwareversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_softwareversion(), target);
  }

  // int32 FactorySoftwareVersion = 3;
  if (this->_internal_factorysoftwareversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_factorysoftwareversion(), target);
  }

  // .CurrentBigApp BigApp = 4;
  if (this->_internal_has_bigapp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bigapp(this), target, stream);
  }

  // string ConsoleName = 5;
  if (!this->_internal_consolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consolename().data(), static_cast<int>(this->_internal_consolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.ConsoleName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_consolename(), target);
  }

  // string MotherboardSerial = 6;
  if (!this->_internal_motherboardserial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_motherboardserial().data(), static_cast<int>(this->_internal_motherboardserial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.MotherboardSerial");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_motherboardserial(), target);
  }

  // string Serial = 7;
  if (!this->_internal_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.Serial");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_serial(), target);
  }

  // string Model = 8;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.Model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_model(), target);
  }

  // string MACAddressLAN = 9;
  if (!this->_internal_macaddresslan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaddresslan().data(), static_cast<int>(this->_internal_macaddresslan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.MACAddressLAN");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_macaddresslan(), target);
  }

  // string MACAddressWIFI = 10;
  if (!this->_internal_macaddresswifi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaddresswifi().data(), static_cast<int>(this->_internal_macaddresswifi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.MACAddressWIFI");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_macaddresswifi(), target);
  }

  // bool UART = 11;
  if (this->_internal_uart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_uart(), target);
  }

  // bool IDUMode = 12;
  if (this->_internal_idumode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_idumode(), target);
  }

  // string IDPS = 13;
  if (!this->_internal_idps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idps().data(), static_cast<int>(this->_internal_idps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.IDPS");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_idps(), target);
  }

  // string PSID = 14;
  if (!this->_internal_psid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_psid().data(), static_cast<int>(this->_internal_psid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetInfoPacket.PSID");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_psid(), target);
  }

  // int32 ConsoleType = 15;
  if (this->_internal_consoletype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_consoletype(), target);
  }

  // int32 Attached = 16;
  if (this->_internal_attached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_attached(), target);
  }

  // int32 AttachedPid = 17;
  if (this->_internal_attachedpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_attachedpid(), target);
  }

  // int32 ForegroundAccountId = 18;
  if (this->_internal_foregroundaccountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_foregroundaccountid(), target);
  }

  // uint64 FreeSpace = 19;
  if (this->_internal_freespace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_freespace(), target);
  }

  // uint64 TotalSpace = 20;
  if (this->_internal_totalspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_totalspace(), target);
  }

  // int32 CPUTemp = 21;
  if (this->_internal_cputemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_cputemp(), target);
  }

  // int32 SOCTemp = 22;
  if (this->_internal_soctemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_soctemp(), target);
  }

  // int32 ThreadCount = 23;
  if (this->_internal_threadcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_threadcount(), target);
  }

  // float AverageCPUUsage = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_averagecpuusage = this->_internal_averagecpuusage();
  uint32_t raw_averagecpuusage;
  memcpy(&raw_averagecpuusage, &tmp_averagecpuusage, sizeof(tmp_averagecpuusage));
  if (raw_averagecpuusage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_averagecpuusage(), target);
  }

  // int32 BusyCore = 25;
  if (this->_internal_busycore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_busycore(), target);
  }

  // .MemoryInfo Ram = 26;
  if (this->_internal_has_ram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::ram(this), target, stream);
  }

  // .MemoryInfo VRam = 27;
  if (this->_internal_has_vram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::vram(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetInfoPacket)
  return target;
}

size_t TargetInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ConsoleName = 5;
  if (!this->_internal_consolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consolename());
  }

  // string MotherboardSerial = 6;
  if (!this->_internal_motherboardserial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_motherboardserial());
  }

  // string Serial = 7;
  if (!this->_internal_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string Model = 8;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string MACAddressLAN = 9;
  if (!this->_internal_macaddresslan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_macaddresslan());
  }

  // string MACAddressWIFI = 10;
  if (!this->_internal_macaddresswifi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_macaddresswifi());
  }

  // string IDPS = 13;
  if (!this->_internal_idps().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idps());
  }

  // string PSID = 14;
  if (!this->_internal_psid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_psid());
  }

  // .CurrentBigApp BigApp = 4;
  if (this->_internal_has_bigapp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bigapp_);
  }

  // .MemoryInfo Ram = 26;
  if (this->_internal_has_ram()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ram_);
  }

  // .MemoryInfo VRam = 27;
  if (this->_internal_has_vram()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vram_);
  }

  // int32 SDKVersion = 1;
  if (this->_internal_sdkversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sdkversion());
  }

  // int32 SoftwareVersion = 2;
  if (this->_internal_softwareversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_softwareversion());
  }

  // int32 FactorySoftwareVersion = 3;
  if (this->_internal_factorysoftwareversion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_factorysoftwareversion());
  }

  // bool UART = 11;
  if (this->_internal_uart() != 0) {
    total_size += 1 + 1;
  }

  // bool IDUMode = 12;
  if (this->_internal_idumode() != 0) {
    total_size += 1 + 1;
  }

  // int32 ConsoleType = 15;
  if (this->_internal_consoletype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_consoletype());
  }

  // int32 Attached = 16;
  if (this->_internal_attached() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attached());
  }

  // int32 AttachedPid = 17;
  if (this->_internal_attachedpid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attachedpid());
  }

  // int32 ForegroundAccountId = 18;
  if (this->_internal_foregroundaccountid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_foregroundaccountid());
  }

  // uint64 FreeSpace = 19;
  if (this->_internal_freespace() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_freespace());
  }

  // uint64 TotalSpace = 20;
  if (this->_internal_totalspace() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_totalspace());
  }

  // int32 CPUTemp = 21;
  if (this->_internal_cputemp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cputemp());
  }

  // int32 SOCTemp = 22;
  if (this->_internal_soctemp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_soctemp());
  }

  // int32 ThreadCount = 23;
  if (this->_internal_threadcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threadcount());
  }

  // float AverageCPUUsage = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_averagecpuusage = this->_internal_averagecpuusage();
  uint32_t raw_averagecpuusage;
  memcpy(&raw_averagecpuusage, &tmp_averagecpuusage, sizeof(tmp_averagecpuusage));
  if (raw_averagecpuusage != 0) {
    total_size += 2 + 4;
  }

  // int32 BusyCore = 25;
  if (this->_internal_busycore() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_busycore());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetInfoPacket::GetClassData() const { return &_class_data_; }

void TargetInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetInfoPacket *>(to)->MergeFrom(
      static_cast<const TargetInfoPacket &>(from));
}


void TargetInfoPacket::MergeFrom(const TargetInfoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetInfoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_consolename().empty()) {
    _internal_set_consolename(from._internal_consolename());
  }
  if (!from._internal_motherboardserial().empty()) {
    _internal_set_motherboardserial(from._internal_motherboardserial());
  }
  if (!from._internal_serial().empty()) {
    _internal_set_serial(from._internal_serial());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (!from._internal_macaddresslan().empty()) {
    _internal_set_macaddresslan(from._internal_macaddresslan());
  }
  if (!from._internal_macaddresswifi().empty()) {
    _internal_set_macaddresswifi(from._internal_macaddresswifi());
  }
  if (!from._internal_idps().empty()) {
    _internal_set_idps(from._internal_idps());
  }
  if (!from._internal_psid().empty()) {
    _internal_set_psid(from._internal_psid());
  }
  if (from._internal_has_bigapp()) {
    _internal_mutable_bigapp()->::CurrentBigApp::MergeFrom(from._internal_bigapp());
  }
  if (from._internal_has_ram()) {
    _internal_mutable_ram()->::MemoryInfo::MergeFrom(from._internal_ram());
  }
  if (from._internal_has_vram()) {
    _internal_mutable_vram()->::MemoryInfo::MergeFrom(from._internal_vram());
  }
  if (from._internal_sdkversion() != 0) {
    _internal_set_sdkversion(from._internal_sdkversion());
  }
  if (from._internal_softwareversion() != 0) {
    _internal_set_softwareversion(from._internal_softwareversion());
  }
  if (from._internal_factorysoftwareversion() != 0) {
    _internal_set_factorysoftwareversion(from._internal_factorysoftwareversion());
  }
  if (from._internal_uart() != 0) {
    _internal_set_uart(from._internal_uart());
  }
  if (from._internal_idumode() != 0) {
    _internal_set_idumode(from._internal_idumode());
  }
  if (from._internal_consoletype() != 0) {
    _internal_set_consoletype(from._internal_consoletype());
  }
  if (from._internal_attached() != 0) {
    _internal_set_attached(from._internal_attached());
  }
  if (from._internal_attachedpid() != 0) {
    _internal_set_attachedpid(from._internal_attachedpid());
  }
  if (from._internal_foregroundaccountid() != 0) {
    _internal_set_foregroundaccountid(from._internal_foregroundaccountid());
  }
  if (from._internal_freespace() != 0) {
    _internal_set_freespace(from._internal_freespace());
  }
  if (from._internal_totalspace() != 0) {
    _internal_set_totalspace(from._internal_totalspace());
  }
  if (from._internal_cputemp() != 0) {
    _internal_set_cputemp(from._internal_cputemp());
  }
  if (from._internal_soctemp() != 0) {
    _internal_set_soctemp(from._internal_soctemp());
  }
  if (from._internal_threadcount() != 0) {
    _internal_set_threadcount(from._internal_threadcount());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_averagecpuusage = from._internal_averagecpuusage();
  uint32_t raw_averagecpuusage;
  memcpy(&raw_averagecpuusage, &tmp_averagecpuusage, sizeof(tmp_averagecpuusage));
  if (raw_averagecpuusage != 0) {
    _internal_set_averagecpuusage(from._internal_averagecpuusage());
  }
  if (from._internal_busycore() != 0) {
    _internal_set_busycore(from._internal_busycore());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetInfoPacket::CopyFrom(const TargetInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfoPacket::IsInitialized() const {
  return true;
}

void TargetInfoPacket::InternalSwap(TargetInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &consolename_, lhs_arena,
      &other->consolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &motherboardserial_, lhs_arena,
      &other->motherboardserial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_, lhs_arena,
      &other->serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &macaddresslan_, lhs_arena,
      &other->macaddresslan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &macaddresswifi_, lhs_arena,
      &other->macaddresswifi_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idps_, lhs_arena,
      &other->idps_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &psid_, lhs_arena,
      &other->psid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetInfoPacket, busycore_)
      + sizeof(TargetInfoPacket::busycore_)
      - PROTOBUF_FIELD_OFFSET(TargetInfoPacket, bigapp_)>(
          reinterpret_cast<char*>(&bigapp_),
          reinterpret_cast<char*>(&other->bigapp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetInfoPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[9]);
}

// ===================================================================

class TargetNotifyPacket::_Internal {
 public:
};

TargetNotifyPacket::TargetNotifyPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TargetNotifyPacket)
}
TargetNotifyPacket::TargetNotifyPacket(const TargetNotifyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iconuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iconuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iconuri().empty()) {
    iconuri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iconuri(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TargetNotifyPacket)
}

inline void TargetNotifyPacket::SharedCtor() {
iconuri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iconuri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TargetNotifyPacket::~TargetNotifyPacket() {
  // @@protoc_insertion_point(destructor:TargetNotifyPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetNotifyPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  iconuri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargetNotifyPacket::ArenaDtor(void* object) {
  TargetNotifyPacket* _this = reinterpret_cast< TargetNotifyPacket* >(object);
  (void)_this;
}
void TargetNotifyPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetNotifyPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetNotifyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetNotifyPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iconuri_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetNotifyPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string IconURI = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_iconuri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetNotifyPacket.IconURI"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetNotifyPacket.Message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetNotifyPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetNotifyPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string IconURI = 1;
  if (!this->_internal_iconuri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iconuri().data(), static_cast<int>(this->_internal_iconuri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetNotifyPacket.IconURI");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_iconuri(), target);
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetNotifyPacket.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetNotifyPacket)
  return target;
}

size_t TargetNotifyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetNotifyPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IconURI = 1;
  if (!this->_internal_iconuri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconuri());
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetNotifyPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetNotifyPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetNotifyPacket::GetClassData() const { return &_class_data_; }

void TargetNotifyPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetNotifyPacket *>(to)->MergeFrom(
      static_cast<const TargetNotifyPacket &>(from));
}


void TargetNotifyPacket::MergeFrom(const TargetNotifyPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetNotifyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_iconuri().empty()) {
    _internal_set_iconuri(from._internal_iconuri());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetNotifyPacket::CopyFrom(const TargetNotifyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetNotifyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetNotifyPacket::IsInitialized() const {
  return true;
}

void TargetNotifyPacket::InternalSwap(TargetNotifyPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iconuri_, lhs_arena,
      &other->iconuri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetNotifyPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[10]);
}

// ===================================================================

class TargetSettingsPacket::_Internal {
 public:
};

TargetSettingsPacket::TargetSettingsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TargetSettingsPacket)
}
TargetSettingsPacket::TargetSettingsPacket(const TargetSettingsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameoverlaylocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gameoverlaylocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gameoverlaylocation().empty()) {
    gameoverlaylocation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gameoverlaylocation(), 
      GetArenaForAllocation());
  }
  ::memcpy(&autoloadsettings_, &from.autoloadsettings_,
    static_cast<size_t>(reinterpret_cast<char*>(&showsoctemp_) -
    reinterpret_cast<char*>(&autoloadsettings_)) + sizeof(showsoctemp_));
  // @@protoc_insertion_point(copy_constructor:TargetSettingsPacket)
}

inline void TargetSettingsPacket::SharedCtor() {
gameoverlaylocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gameoverlaylocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&autoloadsettings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&showsoctemp_) -
    reinterpret_cast<char*>(&autoloadsettings_)) + sizeof(showsoctemp_));
}

TargetSettingsPacket::~TargetSettingsPacket() {
  // @@protoc_insertion_point(destructor:TargetSettingsPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetSettingsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gameoverlaylocation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargetSettingsPacket::ArenaDtor(void* object) {
  TargetSettingsPacket* _this = reinterpret_cast< TargetSettingsPacket* >(object);
  (void)_this;
}
void TargetSettingsPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetSettingsPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetSettingsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetSettingsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameoverlaylocation_.ClearToEmpty();
  ::memset(&autoloadsettings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showsoctemp_) -
      reinterpret_cast<char*>(&autoloadsettings_)) + sizeof(showsoctemp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetSettingsPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool AutoLoadSettings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          autoloadsettings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowDebugTitleIdLabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          showdebugtitleidlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowDevkitPanel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          showdevkitpanel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowDebugSettings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          showdebugsettings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowAppHome = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          showapphome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowBuildOverlay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          showbuildoverlay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GameOverlayLocation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_gameoverlaylocation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TargetSettingsPacket.GameOverlayLocation"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowCPUUsage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          showcpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowThreadCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          showthreadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Showram = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          showram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Showvram = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          showvram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowCPUTemp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          showcputemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowSOCTemp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          showsoctemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetSettingsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetSettingsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool AutoLoadSettings = 1;
  if (this->_internal_autoloadsettings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_autoloadsettings(), target);
  }

  // bool ShowDebugTitleIdLabel = 2;
  if (this->_internal_showdebugtitleidlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_showdebugtitleidlabel(), target);
  }

  // bool ShowDevkitPanel = 3;
  if (this->_internal_showdevkitpanel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_showdevkitpanel(), target);
  }

  // bool ShowDebugSettings = 4;
  if (this->_internal_showdebugsettings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_showdebugsettings(), target);
  }

  // bool ShowAppHome = 5;
  if (this->_internal_showapphome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_showapphome(), target);
  }

  // bool ShowBuildOverlay = 6;
  if (this->_internal_showbuildoverlay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_showbuildoverlay(), target);
  }

  // string GameOverlayLocation = 7;
  if (!this->_internal_gameoverlaylocation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gameoverlaylocation().data(), static_cast<int>(this->_internal_gameoverlaylocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TargetSettingsPacket.GameOverlayLocation");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_gameoverlaylocation(), target);
  }

  // bool ShowCPUUsage = 8;
  if (this->_internal_showcpuusage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_showcpuusage(), target);
  }

  // bool ShowThreadCount = 9;
  if (this->_internal_showthreadcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_showthreadcount(), target);
  }

  // bool Showram = 10;
  if (this->_internal_showram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_showram(), target);
  }

  // bool Showvram = 11;
  if (this->_internal_showvram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_showvram(), target);
  }

  // bool ShowCPUTemp = 12;
  if (this->_internal_showcputemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_showcputemp(), target);
  }

  // bool ShowSOCTemp = 13;
  if (this->_internal_showsoctemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_showsoctemp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetSettingsPacket)
  return target;
}

size_t TargetSettingsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetSettingsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GameOverlayLocation = 7;
  if (!this->_internal_gameoverlaylocation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gameoverlaylocation());
  }

  // bool AutoLoadSettings = 1;
  if (this->_internal_autoloadsettings() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowDebugTitleIdLabel = 2;
  if (this->_internal_showdebugtitleidlabel() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowDevkitPanel = 3;
  if (this->_internal_showdevkitpanel() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowDebugSettings = 4;
  if (this->_internal_showdebugsettings() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowAppHome = 5;
  if (this->_internal_showapphome() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowBuildOverlay = 6;
  if (this->_internal_showbuildoverlay() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowCPUUsage = 8;
  if (this->_internal_showcpuusage() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowThreadCount = 9;
  if (this->_internal_showthreadcount() != 0) {
    total_size += 1 + 1;
  }

  // bool Showram = 10;
  if (this->_internal_showram() != 0) {
    total_size += 1 + 1;
  }

  // bool Showvram = 11;
  if (this->_internal_showvram() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowCPUTemp = 12;
  if (this->_internal_showcputemp() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowSOCTemp = 13;
  if (this->_internal_showsoctemp() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetSettingsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetSettingsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetSettingsPacket::GetClassData() const { return &_class_data_; }

void TargetSettingsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetSettingsPacket *>(to)->MergeFrom(
      static_cast<const TargetSettingsPacket &>(from));
}


void TargetSettingsPacket::MergeFrom(const TargetSettingsPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetSettingsPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gameoverlaylocation().empty()) {
    _internal_set_gameoverlaylocation(from._internal_gameoverlaylocation());
  }
  if (from._internal_autoloadsettings() != 0) {
    _internal_set_autoloadsettings(from._internal_autoloadsettings());
  }
  if (from._internal_showdebugtitleidlabel() != 0) {
    _internal_set_showdebugtitleidlabel(from._internal_showdebugtitleidlabel());
  }
  if (from._internal_showdevkitpanel() != 0) {
    _internal_set_showdevkitpanel(from._internal_showdevkitpanel());
  }
  if (from._internal_showdebugsettings() != 0) {
    _internal_set_showdebugsettings(from._internal_showdebugsettings());
  }
  if (from._internal_showapphome() != 0) {
    _internal_set_showapphome(from._internal_showapphome());
  }
  if (from._internal_showbuildoverlay() != 0) {
    _internal_set_showbuildoverlay(from._internal_showbuildoverlay());
  }
  if (from._internal_showcpuusage() != 0) {
    _internal_set_showcpuusage(from._internal_showcpuusage());
  }
  if (from._internal_showthreadcount() != 0) {
    _internal_set_showthreadcount(from._internal_showthreadcount());
  }
  if (from._internal_showram() != 0) {
    _internal_set_showram(from._internal_showram());
  }
  if (from._internal_showvram() != 0) {
    _internal_set_showvram(from._internal_showvram());
  }
  if (from._internal_showcputemp() != 0) {
    _internal_set_showcputemp(from._internal_showcputemp());
  }
  if (from._internal_showsoctemp() != 0) {
    _internal_set_showsoctemp(from._internal_showsoctemp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetSettingsPacket::CopyFrom(const TargetSettingsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetSettingsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSettingsPacket::IsInitialized() const {
  return true;
}

void TargetSettingsPacket::InternalSwap(TargetSettingsPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gameoverlaylocation_, lhs_arena,
      &other->gameoverlaylocation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetSettingsPacket, showsoctemp_)
      + sizeof(TargetSettingsPacket::showsoctemp_)
      - PROTOBUF_FIELD_OFFSET(TargetSettingsPacket, autoloadsettings_)>(
          reinterpret_cast<char*>(&autoloadsettings_),
          reinterpret_cast<char*>(&other->autoloadsettings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSettingsPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[11]);
}

// ===================================================================

class ProcPacket::_Internal {
 public:
};

ProcPacket::ProcPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProcPacket)
}
ProcPacket::ProcPacket(const ProcPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_titleid().empty()) {
    titleid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_titleid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(processid_));
  // @@protoc_insertion_point(copy_constructor:ProcPacket)
}

inline void ProcPacket::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
titleid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  titleid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(processid_));
}

ProcPacket::~ProcPacket() {
  // @@protoc_insertion_point(destructor:ProcPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titleid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcPacket::ArenaDtor(void* object) {
  ProcPacket* _this = reinterpret_cast< ProcPacket* >(object);
  (void)_this;
}
void ProcPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  titleid_.ClearToEmpty();
  ::memset(&appid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&appid_)) + sizeof(processid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 AppId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ProcessId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcPacket.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TitleId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_titleid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProcPacket.TitleId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AppId = 1;
  if (this->_internal_appid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // int32 ProcessId = 2;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processid(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcPacket.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string TitleId = 4;
  if (!this->_internal_titleid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_titleid().data(), static_cast<int>(this->_internal_titleid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProcPacket.TitleId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_titleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcPacket)
  return target;
}

size_t ProcPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string TitleId = 4;
  if (!this->_internal_titleid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_titleid());
  }

  // int32 AppId = 1;
  if (this->_internal_appid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
  }

  // int32 ProcessId = 2;
  if (this->_internal_processid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_processid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcPacket::GetClassData() const { return &_class_data_; }

void ProcPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcPacket *>(to)->MergeFrom(
      static_cast<const ProcPacket &>(from));
}


void ProcPacket::MergeFrom(const ProcPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_titleid().empty()) {
    _internal_set_titleid(from._internal_titleid());
  }
  if (from._internal_appid() != 0) {
    _internal_set_appid(from._internal_appid());
  }
  if (from._internal_processid() != 0) {
    _internal_set_processid(from._internal_processid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcPacket::CopyFrom(const ProcPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcPacket::IsInitialized() const {
  return true;
}

void ProcPacket::InternalSwap(ProcPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &titleid_, lhs_arena,
      &other->titleid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcPacket, processid_)
      + sizeof(ProcPacket::processid_)
      - PROTOBUF_FIELD_OFFSET(ProcPacket, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[12]);
}

// ===================================================================

class ProcListPacket::_Internal {
 public:
};

ProcListPacket::ProcListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  processes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ProcListPacket)
}
ProcListPacket::ProcListPacket(const ProcListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      processes_(from.processes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProcListPacket)
}

inline void ProcListPacket::SharedCtor() {
}

ProcListPacket::~ProcListPacket() {
  // @@protoc_insertion_point(destructor:ProcListPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcListPacket::ArenaDtor(void* object) {
  ProcListPacket* _this = reinterpret_cast< ProcListPacket* >(object);
  (void)_this;
}
void ProcListPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcListPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ProcListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcListPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProcPacket Processes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProcListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProcPacket Processes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_processes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_processes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProcListPacket)
  return target;
}

size_t ProcListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProcListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProcPacket Processes = 1;
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcListPacket::GetClassData() const { return &_class_data_; }

void ProcListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcListPacket *>(to)->MergeFrom(
      static_cast<const ProcListPacket &>(from));
}


void ProcListPacket::MergeFrom(const ProcListPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProcListPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  processes_.MergeFrom(from.processes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcListPacket::CopyFrom(const ProcListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProcListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcListPacket::IsInitialized() const {
  return true;
}

void ProcListPacket::InternalSwap(ProcListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  processes_.InternalSwap(&other->processes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcListPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[13]);
}

// ===================================================================

class LibraryInfoPacket::_Internal {
 public:
};

LibraryInfoPacket::LibraryInfoPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LibraryInfoPacket)
}
LibraryInfoPacket::LibraryInfoPacket(const LibraryInfoPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mapbase_, &from.mapbase_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&mapbase_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:LibraryInfoPacket)
}

inline void LibraryInfoPacket::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapbase_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&mapbase_)) + sizeof(handle_));
}

LibraryInfoPacket::~LibraryInfoPacket() {
  // @@protoc_insertion_point(destructor:LibraryInfoPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LibraryInfoPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LibraryInfoPacket::ArenaDtor(void* object) {
  LibraryInfoPacket* _this = reinterpret_cast< LibraryInfoPacket* >(object);
  (void)_this;
}
void LibraryInfoPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LibraryInfoPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LibraryInfoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:LibraryInfoPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  ::memset(&mapbase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) -
      reinterpret_cast<char*>(&mapbase_)) + sizeof(handle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryInfoPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LibraryInfoPacket.Path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 MapBase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mapbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 MapSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          mapsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TextSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          textsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 DataBase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          database_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 DataSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryInfoPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LibraryInfoPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LibraryInfoPacket.Path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // uint64 MapBase = 3;
  if (this->_internal_mapbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_mapbase(), target);
  }

  // uint64 MapSize = 4;
  if (this->_internal_mapsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_mapsize(), target);
  }

  // uint64 TextSize = 5;
  if (this->_internal_textsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_textsize(), target);
  }

  // uint64 DataBase = 6;
  if (this->_internal_database() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_database(), target);
  }

  // uint64 DataSize = 7;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_datasize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LibraryInfoPacket)
  return target;
}

size_t LibraryInfoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LibraryInfoPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // uint64 MapBase = 3;
  if (this->_internal_mapbase() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_mapbase());
  }

  // uint64 MapSize = 4;
  if (this->_internal_mapsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_mapsize());
  }

  // uint64 TextSize = 5;
  if (this->_internal_textsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_textsize());
  }

  // uint64 DataBase = 6;
  if (this->_internal_database() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_database());
  }

  // uint64 DataSize = 7;
  if (this->_internal_datasize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_datasize());
  }

  // uint32 Handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryInfoPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LibraryInfoPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryInfoPacket::GetClassData() const { return &_class_data_; }

void LibraryInfoPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LibraryInfoPacket *>(to)->MergeFrom(
      static_cast<const LibraryInfoPacket &>(from));
}


void LibraryInfoPacket::MergeFrom(const LibraryInfoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LibraryInfoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_mapbase() != 0) {
    _internal_set_mapbase(from._internal_mapbase());
  }
  if (from._internal_mapsize() != 0) {
    _internal_set_mapsize(from._internal_mapsize());
  }
  if (from._internal_textsize() != 0) {
    _internal_set_textsize(from._internal_textsize());
  }
  if (from._internal_database() != 0) {
    _internal_set_database(from._internal_database());
  }
  if (from._internal_datasize() != 0) {
    _internal_set_datasize(from._internal_datasize());
  }
  if (from._internal_handle() != 0) {
    _internal_set_handle(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryInfoPacket::CopyFrom(const LibraryInfoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LibraryInfoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryInfoPacket::IsInitialized() const {
  return true;
}

void LibraryInfoPacket::InternalSwap(LibraryInfoPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LibraryInfoPacket, handle_)
      + sizeof(LibraryInfoPacket::handle_)
      - PROTOBUF_FIELD_OFFSET(LibraryInfoPacket, mapbase_)>(
          reinterpret_cast<char*>(&mapbase_),
          reinterpret_cast<char*>(&other->mapbase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryInfoPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[14]);
}

// ===================================================================

class LibraryListPacket::_Internal {
 public:
};

LibraryListPacket::LibraryListPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  libraries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LibraryListPacket)
}
LibraryListPacket::LibraryListPacket(const LibraryListPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      libraries_(from.libraries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LibraryListPacket)
}

inline void LibraryListPacket::SharedCtor() {
}

LibraryListPacket::~LibraryListPacket() {
  // @@protoc_insertion_point(destructor:LibraryListPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LibraryListPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LibraryListPacket::ArenaDtor(void* object) {
  LibraryListPacket* _this = reinterpret_cast< LibraryListPacket* >(object);
  (void)_this;
}
void LibraryListPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LibraryListPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LibraryListPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:LibraryListPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  libraries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryListPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .LibraryInfoPacket Libraries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_libraries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryListPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LibraryListPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LibraryInfoPacket Libraries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_libraries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_libraries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LibraryListPacket)
  return target;
}

size_t LibraryListPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LibraryListPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LibraryInfoPacket Libraries = 1;
  total_size += 1UL * this->_internal_libraries_size();
  for (const auto& msg : this->libraries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryListPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LibraryListPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryListPacket::GetClassData() const { return &_class_data_; }

void LibraryListPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LibraryListPacket *>(to)->MergeFrom(
      static_cast<const LibraryListPacket &>(from));
}


void LibraryListPacket::MergeFrom(const LibraryListPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LibraryListPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  libraries_.MergeFrom(from.libraries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryListPacket::CopyFrom(const LibraryListPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LibraryListPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryListPacket::IsInitialized() const {
  return true;
}

void LibraryListPacket::InternalSwap(LibraryListPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  libraries_.InternalSwap(&other->libraries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryListPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[15]);
}

// ===================================================================

class FilePacket::_Internal {
 public:
};

FilePacket::FilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FilePacket)
}
FilePacket::FilePacket(const FilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filepath().empty()) {
    filepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filepath(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FilePacket)
}

inline void FilePacket::SharedCtor() {
filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FilePacket::~FilePacket() {
  // @@protoc_insertion_point(destructor:FilePacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilePacket::ArenaDtor(void* object) {
  FilePacket* _this = reinterpret_cast< FilePacket* >(object);
  (void)_this;
}
void FilePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:FilePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string FilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FilePacket.FilePath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string FilePath = 1;
  if (!this->_internal_filepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilePacket.FilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilePacket)
  return target;
}

size_t FilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string FilePath = 1;
  if (!this->_internal_filepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilePacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilePacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilePacket::GetClassData() const { return &_class_data_; }

void FilePacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilePacket *>(to)->MergeFrom(
      static_cast<const FilePacket &>(from));
}


void FilePacket::MergeFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filepath().empty()) {
    _internal_set_filepath(from._internal_filepath());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilePacket::CopyFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePacket::IsInitialized() const {
  return true;
}

void FilePacket::InternalSwap(FilePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filepath_, lhs_arena,
      &other->filepath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_APIPackets_2eproto_getter, &descriptor_table_APIPackets_2eproto_once,
      file_level_metadata_APIPackets_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InitialPacket* Arena::CreateMaybeMessage< ::InitialPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InitialPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ResultState* Arena::CreateMaybeMessage< ::ResultState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResultState >(arena);
}
template<> PROTOBUF_NOINLINE ::AppInfoPacket* Arena::CreateMaybeMessage< ::AppInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::AppInfoListPacket* Arena::CreateMaybeMessage< ::AppInfoListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppInfoListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::AppPacket* Arena::CreateMaybeMessage< ::AppPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::RWPacket* Arena::CreateMaybeMessage< ::RWPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RWPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::SPRXPacket* Arena::CreateMaybeMessage< ::SPRXPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SPRXPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::MemoryInfo* Arena::CreateMaybeMessage< ::MemoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CurrentBigApp* Arena::CreateMaybeMessage< ::CurrentBigApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CurrentBigApp >(arena);
}
template<> PROTOBUF_NOINLINE ::TargetInfoPacket* Arena::CreateMaybeMessage< ::TargetInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TargetInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::TargetNotifyPacket* Arena::CreateMaybeMessage< ::TargetNotifyPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TargetNotifyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::TargetSettingsPacket* Arena::CreateMaybeMessage< ::TargetSettingsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TargetSettingsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcPacket* Arena::CreateMaybeMessage< ::ProcPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ProcListPacket* Arena::CreateMaybeMessage< ::ProcListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProcListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::LibraryInfoPacket* Arena::CreateMaybeMessage< ::LibraryInfoPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LibraryInfoPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::LibraryListPacket* Arena::CreateMaybeMessage< ::LibraryListPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LibraryListPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::FilePacket* Arena::CreateMaybeMessage< ::FilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FilePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
